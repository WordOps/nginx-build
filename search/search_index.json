{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Process \u00b6 Building your package \u00b6 WARNING: Before starting go through the links on the reference page . NOTE: This guide is for building the version 1.22.1 of Nginx. You might need to change the commands according to the latest stable version of Nginx. Start the container. mkdir ~/nginx-build cd ~/nginx-build docker run --name = nginx-build -dit -v $PWD :/root/data virtubox/nginx-build bash Copy the GPG keys(both public and private) to ~/nginx-build and if you don't have one, you can check here , how to create one. Enter the container. docker exec -it nginx-build bash Import the your GPG keys. cd /root/data/ gpg --import public.key gpg --import --allow-secret-key-import private.key Clone the repo. git clone https://github.com/WordOps/nginx-build cd nginx-build Set your name as the Package Maintainer. export DEBFULLNAME = \"WordOps\" Run the script with the latest stable release and your email id . bash ppa.sh wordops@example.com At the end, the script will open your favorite editor to add content into the changelog. nginx ( 1 .22.1-1ppa~stable ) jammy ; urgency = medium * Update to Nginx 1 .22.1 in response to HTTP/2 vulnerabilities -- Thomas SUCHON <thomas@virtubox.net> Fri, 19 Oct 2022 01 :03:00 +0530 This revision number of the build in bold has to be changed to build it successfully. (1.22.1-1ppa~stable) This will download the latest Nginx source, the modules from their respective Github links, modify the changelog and create the whole directory structure at ~/PPA/nginx Go to the nginx directory (check the latest version) cd ~/PPA/nginx/nginx-1.22.1 Start the packaging with the GPG keys that you have exported. If in doubt about GPGKEY, you can check this page. debuild -S -sd -k97BAD476 This is the key ID for WordOps GPG key. You will be asked for a password. Get the password for the GPG key. Uploading the package to the repositories \u00b6 Opensuse Build Service \u00b6 Checkout the repository. If you don't have a repository, go to Opensuse Build Service , and create one cd ~ osc co home:virtubox:WordOps Warning : The repository name is case sensitive. Remove the current files from the nginx repo. cd home \\: virtubox \\: WordOps/nginx osc rm * The files that need to be uploaded will be generated in the ~/PPA/nginx directory. Only the files you already see here will be necessary. Copy the files from ~/PPA/nginx to ~/home:virtubox/nginx . rsync -avzP --exclude = \"modules\" --exclude = \"nginx-1.22.1\" ~/PPA/nginx/ ~/home:virtubox:WordOps/nginx/ Add the new files to the repo. osc add * Commit and push the changes. osc ci -m \"Revision message describing any changes\" LaunchPad PPA \u00b6 For LauchPad PPA, nginx package name have to include the Ubuntu release you want to build. For this we will use the tool backportpackage to create each version of nginx package we want. Go into the nginx directory cd ~/PPA/nginx Then use backportpackage on the .dsc file previously built for OpenSuse repository backportpackage -r -w . -d bionic -d jammy -d focal -k97BAD476 nginx_1.22.1-1ppa~stable.dsc Replace -k97BAD476 with your GPG key ID. It will build 3 nginx packages, for Ubuntu 18.04 (bionic), Ubuntu 20.04 (focal) and Ubuntu 22.04 (jammy). Upload your package to LaunchPad PPA dput ppa:virtubox/nginx nginx_1.22.1-1ppa~stable~ubuntu18.04.1_source.changes dput ppa:virtubox/nginx nginx_1.22.1-1ppa~stable~ubuntu20.04.1_source.changes dput ppa:virtubox/nginx nginx_1.22.1-1ppa~stable~ubuntu22.04.1_source.changes You have to upload an indivual nginx package for each Ubuntu release you want to support.","title":"Home"},{"location":"#the-process","text":"","title":"The Process"},{"location":"#building-your-package","text":"WARNING: Before starting go through the links on the reference page . NOTE: This guide is for building the version 1.22.1 of Nginx. You might need to change the commands according to the latest stable version of Nginx. Start the container. mkdir ~/nginx-build cd ~/nginx-build docker run --name = nginx-build -dit -v $PWD :/root/data virtubox/nginx-build bash Copy the GPG keys(both public and private) to ~/nginx-build and if you don't have one, you can check here , how to create one. Enter the container. docker exec -it nginx-build bash Import the your GPG keys. cd /root/data/ gpg --import public.key gpg --import --allow-secret-key-import private.key Clone the repo. git clone https://github.com/WordOps/nginx-build cd nginx-build Set your name as the Package Maintainer. export DEBFULLNAME = \"WordOps\" Run the script with the latest stable release and your email id . bash ppa.sh wordops@example.com At the end, the script will open your favorite editor to add content into the changelog. nginx ( 1 .22.1-1ppa~stable ) jammy ; urgency = medium * Update to Nginx 1 .22.1 in response to HTTP/2 vulnerabilities -- Thomas SUCHON <thomas@virtubox.net> Fri, 19 Oct 2022 01 :03:00 +0530 This revision number of the build in bold has to be changed to build it successfully. (1.22.1-1ppa~stable) This will download the latest Nginx source, the modules from their respective Github links, modify the changelog and create the whole directory structure at ~/PPA/nginx Go to the nginx directory (check the latest version) cd ~/PPA/nginx/nginx-1.22.1 Start the packaging with the GPG keys that you have exported. If in doubt about GPGKEY, you can check this page. debuild -S -sd -k97BAD476 This is the key ID for WordOps GPG key. You will be asked for a password. Get the password for the GPG key.","title":"Building your package"},{"location":"#uploading-the-package-to-the-repositories","text":"","title":"Uploading the package to the repositories"},{"location":"#opensuse-build-service","text":"Checkout the repository. If you don't have a repository, go to Opensuse Build Service , and create one cd ~ osc co home:virtubox:WordOps Warning : The repository name is case sensitive. Remove the current files from the nginx repo. cd home \\: virtubox \\: WordOps/nginx osc rm * The files that need to be uploaded will be generated in the ~/PPA/nginx directory. Only the files you already see here will be necessary. Copy the files from ~/PPA/nginx to ~/home:virtubox/nginx . rsync -avzP --exclude = \"modules\" --exclude = \"nginx-1.22.1\" ~/PPA/nginx/ ~/home:virtubox:WordOps/nginx/ Add the new files to the repo. osc add * Commit and push the changes. osc ci -m \"Revision message describing any changes\"","title":"Opensuse Build Service"},{"location":"#launchpad-ppa","text":"For LauchPad PPA, nginx package name have to include the Ubuntu release you want to build. For this we will use the tool backportpackage to create each version of nginx package we want. Go into the nginx directory cd ~/PPA/nginx Then use backportpackage on the .dsc file previously built for OpenSuse repository backportpackage -r -w . -d bionic -d jammy -d focal -k97BAD476 nginx_1.22.1-1ppa~stable.dsc Replace -k97BAD476 with your GPG key ID. It will build 3 nginx packages, for Ubuntu 18.04 (bionic), Ubuntu 20.04 (focal) and Ubuntu 22.04 (jammy). Upload your package to LaunchPad PPA dput ppa:virtubox/nginx nginx_1.22.1-1ppa~stable~ubuntu18.04.1_source.changes dput ppa:virtubox/nginx nginx_1.22.1-1ppa~stable~ubuntu20.04.1_source.changes dput ppa:virtubox/nginx nginx_1.22.1-1ppa~stable~ubuntu22.04.1_source.changes You have to upload an indivual nginx package for each Ubuntu release you want to support.","title":"LaunchPad PPA"},{"location":"GPG-keys-help/","text":"GPG Keys Generate GPG/PGP Keys: \u00b6 ^_^ [ Mitesh@Shah:~ ] $ gpg --gen-key Please select what kind of key you want: ( 1 ) RSA and RSA ( default ) ( 2 ) DSA and Elgamal ( 3 ) DSA ( sign only ) ( 4 ) RSA ( sign only ) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? ( 2048 ) 4096 Please specify how long the key should be valid. 0 = key does not expire = key expires in n days w = key expires in n weeks m = key expires in n months y = key expires in n years Key is valid for ? ( 0 ) 0 Key does not expire at all Is this correct? ( y/N ) y Real name: Mitesh Shah Email address: Mr.Miteshah@gmail.com Comment: rtCamp Launchpad You selected this USER-ID: \"Mitesh Shah (rtCamp Launchpad) <Mr.Miteshah@gmail.com>\" Change ( N ) ame, ( C ) omment, ( E ) mail or ( O ) kay/ ( Q ) uit? O generator a better chance to gain enough entropy. Not enough random bytes available. Please do some other work to give the OS a chance to collect more entropy! ( Need 281 more bytes ) Just open another terminal window and run some commands which generates plenty of activity. My favorite is running a disk write performance benchmark using: dd bs = 1M count = 1024 if = /dev/zero of = test conv = fdatasync List Keys: \u00b6 ^_^ [ Mitesh@Shah:~ ] $ gpg --list-keys /home/mitesh/.gnupg/pubring.gpg ------------------------ pub 4096R/387AFF02 2014 -04-21 uid Mitesh Shah ( rtCamp Launchpad ) <Mr.Miteshah@gmail.com> sub 4096R/0B9C8B2D 2014 -04-21 Making An ASCII Armored Version Your Public Key: \u00b6 ^_^ [ Mitesh@Shah:~ ] $ gpg --output MiteshShah.asc --export -a $GPGKEY NOTE: In This Example $GPGKEY = 387AFF02 Upload Keys To Ubuntu Key Server: \u00b6 ^_^ [ Mitesh@Shah:~ ] $ gpg --send-keys --keyserver keyserver.ubuntu.com $GPGKEY GPG Key FingerPrint: \u00b6 ^_^ [ Mitesh@Shah:~ ] $ gpg --fingerprint /home/mitesh/.gnupg/pubring.gpg ------------------------ pub 4096R/387AFF02 2014 -04-21 Key fingerprint = 80D6 A2F6 AA2F E34F 0E3A C850 0E18 6538 387A FF02 uid Mitesh Shah ( rtCamp Launchpad ) <Mr.Miteshah@gmail.com> sub 4096R/0B9C8B2D 2014 -04-21","title":"GPG keys help"},{"location":"GPG-keys-help/#generate-gpgpgp-keys","text":"^_^ [ Mitesh@Shah:~ ] $ gpg --gen-key Please select what kind of key you want: ( 1 ) RSA and RSA ( default ) ( 2 ) DSA and Elgamal ( 3 ) DSA ( sign only ) ( 4 ) RSA ( sign only ) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? ( 2048 ) 4096 Please specify how long the key should be valid. 0 = key does not expire = key expires in n days w = key expires in n weeks m = key expires in n months y = key expires in n years Key is valid for ? ( 0 ) 0 Key does not expire at all Is this correct? ( y/N ) y Real name: Mitesh Shah Email address: Mr.Miteshah@gmail.com Comment: rtCamp Launchpad You selected this USER-ID: \"Mitesh Shah (rtCamp Launchpad) <Mr.Miteshah@gmail.com>\" Change ( N ) ame, ( C ) omment, ( E ) mail or ( O ) kay/ ( Q ) uit? O generator a better chance to gain enough entropy. Not enough random bytes available. Please do some other work to give the OS a chance to collect more entropy! ( Need 281 more bytes ) Just open another terminal window and run some commands which generates plenty of activity. My favorite is running a disk write performance benchmark using: dd bs = 1M count = 1024 if = /dev/zero of = test conv = fdatasync","title":"Generate GPG/PGP Keys:"},{"location":"GPG-keys-help/#list-keys","text":"^_^ [ Mitesh@Shah:~ ] $ gpg --list-keys /home/mitesh/.gnupg/pubring.gpg ------------------------ pub 4096R/387AFF02 2014 -04-21 uid Mitesh Shah ( rtCamp Launchpad ) <Mr.Miteshah@gmail.com> sub 4096R/0B9C8B2D 2014 -04-21","title":"List Keys:"},{"location":"GPG-keys-help/#making-an-ascii-armored-version-your-public-key","text":"^_^ [ Mitesh@Shah:~ ] $ gpg --output MiteshShah.asc --export -a $GPGKEY NOTE: In This Example $GPGKEY = 387AFF02","title":"Making An ASCII Armored Version Your Public Key:"},{"location":"GPG-keys-help/#upload-keys-to-ubuntu-key-server","text":"^_^ [ Mitesh@Shah:~ ] $ gpg --send-keys --keyserver keyserver.ubuntu.com $GPGKEY","title":"Upload Keys To Ubuntu Key Server:"},{"location":"GPG-keys-help/#gpg-key-fingerprint","text":"^_^ [ Mitesh@Shah:~ ] $ gpg --fingerprint /home/mitesh/.gnupg/pubring.gpg ------------------------ pub 4096R/387AFF02 2014 -04-21 Key fingerprint = 80D6 A2F6 AA2F E34F 0E3A C850 0E18 6538 387A FF02 uid Mitesh Shah ( rtCamp Launchpad ) <Mr.Miteshah@gmail.com> sub 4096R/0B9C8B2D 2014 -04-21","title":"GPG Key FingerPrint:"},{"location":"expiring-gpg-key-opensuse/","text":"Use the existing docker image with osc tool installed. If you want, you can install it locally and follow these steps. docker run --name=osc --rm -it rtcamp/nginx-build bash docker exec -it osc bash Extend the expiry date for the key, osc signkey --extend home:rtCamp Get the updated key, osc signkey home:rtCamp > public.key Upload to a keyserver, gpg --import public.key gpg --keyserver keyserver.ubuntu.com --send-key '3050AC3CD2AE6F03'","title":"Expiring gpg key opensuse"},{"location":"reference/","text":"Reference \u00b6 https://www.debian.org/doc/manuals/maint-guide/build.en.html https://www.debian.org/doc/manuals/maint-guide/update.en.html#newupstream https://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version","title":"Reference"},{"location":"reference/#reference","text":"https://www.debian.org/doc/manuals/maint-guide/build.en.html https://www.debian.org/doc/manuals/maint-guide/update.en.html#newupstream https://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version","title":"Reference"}]}